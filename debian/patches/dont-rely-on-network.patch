Description: don't rely on network
Author: Mehdi Abaakouk <sileht@sileht.net>

--- a/glance/openstack/common/setup.py
+++ b/glance/openstack/common/setup.py
@@ -261,7 +261,7 @@
             # sdist.sdist is an old style class, can't use super()
             sdist.sdist.run(self)
 
-    cmdclass['sdist'] = LocalSDist
+    #cmdclass['sdist'] = LocalSDist
 
     # If Sphinx is installed on the box running setup.py,
     # enable setup.py to build the documentation, otherwise,
@@ -322,21 +322,26 @@
 def get_pre_version(projectname, base_version):
     """Return a version which is leading up to a version that will
        be released in the future."""
-    if os.path.isdir('.git'):
-        current_tag = _get_git_current_tag()
-        if current_tag is not None:
-            version = current_tag
-        else:
-            branch_name = os.getenv('BRANCHNAME',
-                                    os.getenv('GERRIT_REFNAME',
-                                              _get_git_branch_name()))
-            version_suffix = _get_git_next_version_suffix(branch_name)
-            version = "%s~%s" % (base_version, version_suffix)
-        write_versioninfo(projectname, version)
-        return version
-    else:
-        version = read_versioninfo(projectname)
-    return version
+    return read_versioninfo(projectname)
+
+#def get_pre_version(projectname, base_version):
+#    """Return a version which is leading up to a version that will
+#       be released in the future."""
+#    if os.path.isdir('.git'):
+#        current_tag = _get_git_current_tag()
+#        if current_tag is not None:
+#            version = current_tag
+#        else:
+#            branch_name = os.getenv('BRANCHNAME',
+#                                    os.getenv('GERRIT_REFNAME',
+#                                              _get_git_branch_name()))
+#            version_suffix = _get_git_next_version_suffix(branch_name)
+#            version = "%s~%s" % (base_version, version_suffix)
+#        write_versioninfo(projectname, version)
+#        return version
+#    else:
+#        version = read_versioninfo(projectname)
+#    return version
 
 
 def get_post_version(projectname):
@@ -344,8 +349,8 @@
     revision if there is one, or tag plus number of additional revisions
     if the current revision has no tag."""
 
-    if os.path.isdir('.git'):
-        version = _get_git_post_version()
-        write_versioninfo(projectname, version)
-        return version
+    #if os.path.isdir('.git'):
+    #    version = _get_git_post_version()
+    #    write_versioninfo(projectname, version)
+    #    return version
     return read_versioninfo(projectname)
