#!/bin/sh

set -e

# Param:
# $1 = name of config file
install_config_file (){
	if [ ! -e ${ETC}/${1} ] ; then
		install -D -m 660 -o glance -g glance /usr/share/glance-common/${1} ${ETC}/${1}
	fi
}

confset () {
    file="$1"
    section="$2"
    var="$3"
    value="$4"
    python -c "import configobj
config=configobj.ConfigObj('$file')
config['$section']['$var']='$value'
config.write()"
}

if [ "$1" = "configure" ] ; then
	# Create user and group for glance
	if ! getent group glance > /dev/null 2>&1 ; then
		addgroup --quiet --system glance >/dev/null
	fi
	if ! getent passwd glance > /dev/null 2>&1 ; then
		adduser --quiet --system --home /var/lib/glance --ingroup glance --no-create-home --shell /bin/false glance
	fi

	# Make sure we have a /etc/glance folder with config files in it.
	ETC=/etc/glance
	API_CONF=${ETC}/glance-api.conf
	GREG_CONF=${ETC}/glance-registry.conf

	if [ ! -e ${ETC} ] ; then
		install -d -m 0700 -o glance -g glance ${ETC}
	fi
	install_config_file glance-api.conf
	install_config_file glance-registry.conf

	install_config_file glance-api-paste.ini
	install_config_file glance-registry-paste.ini

	install_config_file glance-cache.conf
	install_config_file glance-scrubber.conf
	install_config_file policy.json

	# Customize glance-api.conf
	. /usr/share/debconf/confmodule
	. /usr/share/dbconfig-common/dpkg/postinst

	db_get glance/paste-flavor || true
	FLAVOR="$RET"

	case "$FLAVOR" in
	caching)
	;;
	keystone*)
		confset ${API_CONF} paste_deploy flavor ${FLAVOR}
		confset ${GREG_CONF} paste_deploy flavor ${FLAVOR}

		db_get glance/auth-host
		AUTH_HOST=${RET}
		confset ${API_CONF} keystone_authtoken auth_host ${AUTH_HOST}
		confset ${GREG_CONF} keystone_authtoken auth_host ${AUTH_HOST}

		db_get glance/admin-tenant-name
		TENANT_NAME=${RET}
		confset ${API_CONF} keystone_authtoken admin_tenant_name ${TENANT_NAME}
		confset ${GREG_CONF} keystone_authtoken admin_tenant_name ${TENANT_NAME}

		db_get glance/admin-user
		ADMIN_USER=${RET}
		confset ${API_CONF} keystone_authtoken admin_user ${ADMIN_USER}
		confset ${GREG_CONF} keystone_authtoken admin_user ${ADMIN_USER}

		db_get glance/admin-password
		ADMIN_PASS=${RET}
		confset ${API_CONF} keystone_authtoken admin_password ${ADMIN_PASS}
		confset ${GREG_CONF} keystone_authtoken admin_password ${ADMIN_PASS}
	;;
	*)
		confset ${API_CONF} DEFAULT flavor ${FLAVOR}
		confset ${GREG_CONF} DEFAULT flavor ${FLAVOR}
	;;
	esac

	db_get glance/configure_db
	if [ "$RET" = "true" ]; then
            dbc_dbfile_owner="glance:glance"
            dbc_go glance-common $@
	
	    if [ "$dbc_install" = "true" ] ; then
		case "$dbc_dbtype" in
		    mysql)
			if [ -n "$dbc_dbport" ] ; then
			    dbport=:$dbc_dbport
			fi
			SQL_CONNECTION="mysql://$dbc_dbuser:$dbc_dbpass@${dbc_dbserver:-localhost}$dbport/$dbc_dbname"
			;;
		    postgresql*|pgsql)
			if [ -n "$dbc_dbport" ] ; then
			    dbport=:$dbc_dbport
			fi
			SQL_CONNECTION="postgresql://$dbc_dbuser:$dbc_dbpass@${dbc_dbserver:-localhost}$dbport/$dbc_dbname"
			;;
		    *)
			SQL_CONNECTION="sqlite:///$dbc_basepath/$dbc_dbname"
		esac
	    fi

	    confset ${API_CONF} DEFAULT sql_connection ${SQL_CONNECTION}
	    confset ${GREG_CONF} DEFAULT sql_connection ${SQL_CONNECTION}

	    if [ "$dbc_upgrade" = "true" ] ; then
		su glance -c "glance-manage db_sync" || true
	    fi

        fi

	chown -R glance:adm /var/log/glance/
	chmod 0750 /var/log/glance/
	chown glance:glance -R /var/lib/glance/ /etc/glance/
fi

#DEBHELPER#
